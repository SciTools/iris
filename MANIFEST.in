# NOTE: based on a generic template in Scitools/.github/templates/MANIFEST.in

# General principles
#     - enable user to build locally, as well as in CI
#     - make it ignore temporary files generated by dev processes, e.g. coverage checks
#     - encode typical decisions, e.g. whether we package docs, requirements etc

#---------
# SECTION: main code sources
# N.B. package dir is "lib" not "src"
recursive-include lib *.cdl *.cml *.json *.md *.py *.template *.txt *.xml
#---
# principles:
#    - *no* "prune" command is used
#    - use "include-recursive", by relevant file extensions
# hints:
#     - top-level dir is typically "src", but maybe "lib" or <package-name>
#     - default package rules mean we generally don't actually *need* a statement
#         - but it's better to be explicit
#     - extension filetypes are typically sources (*.py)
#         - might also need testdata files, e.g. *.nc, *.npy *.npz
#         - also possibly non-python, e.g. *.pyx for Cython


#---------
# SECTION: docs
prune docs
# and if required ... include ONLY docs source files.
# E.G. recursive-include docs *.rst *.inc
#---
# principles:
#    - use prune to ignore everything (optionally: except the docs sources)
# hints:
#    - most projects don't want to package the docs, but some currently do (cf-units).


#---------
# SECTION: requirements
prune requirements
recursive-include requirements *.txt
#---
# principles:
#    include just requirements-level info, not lock files
# hints:
#    - not all projects include requirements, but they can be drawn in anyway by dynamic dependencies
#        in the setuptools build process, linked via config in pyproject.toml
#    - for some repos, the *.txt are actually lockfiles.  This probably needs fixing.


#---------
# SECTION: root files
exclude .flake8
exclude .git-blame-ignore-revs
exclude .gitignore
exclude .mailmap
exclude .pre-commit-config.yaml
exclude .readthedocs.yml
exclude .ruff.toml
exclude CHANGES
include CITATION.cff
exclude codecov.yml
exclude CODE_OF_CONDUCT.md
include COPYING
include COPYING.LESSER
include LICENSE
exclude Makefile
include noxfile.py
#---
#Iris-specific additions
exclude .git_archival.txt
exclude .gitattributes
exclude .lycheeignore


#---
# principles:
#    - *ANY* file in the root should be explicitly "include"- or "exclude"-d
#         - EXCEPT (possibly) those covered by setuptools default rules (see above link)
#             - including : README.md/.rst; pyproject.toml; setup.py/.cfg
#         - N.B. a GHA "ci-manifest" check, if used, will check all this
#    - the above are typical ones : given in sorted order
#    - NB many will (eventually) be templated, but that is a separate issue
#    - probably, this section can be included as *boilerplate*
#        - i.e. it doesn't matter if some of the files mentioned don't exist


#---------
# SECTION: generic exclusions
# (1) top-level directories to omit entirely
prune .github
prune .nox
prune .tox
prune .coverage
# (2) top-level files to omit
exclude .coveragerc
# (3) file types (path patterns) to skip everywhere
global-exclude *.py[cod]
global-exclude __pycache__
#---
# principles:
#    - common directories, files and file-types to be generally ignored
#        - all outside version control, temporary non-coding output and cache data
#             produced by dev processes, automation or user tools
#    - by having this section LAST, it can remove files which might have been added by
#        previous sections -- such as python compiler cache files
#    - can include this section as **boilerplate** :
#        - won't all exist in every repo, but including them all does no harm


#
#=================================
# Local Iris-specific settings
#
prune benchmarks
prune etc
prune tools

# files required to build iris.std_names module
include etc/cf-standard-name-table.xml
include tools/generate_std_names.py

